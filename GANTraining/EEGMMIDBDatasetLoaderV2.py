# -*- coding: utf-8 -*-
"""EEGMMIDBDatasetLoaderV2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a8XGgmc7xNSJ24VmqCHf5khbq1Gc5Z6a
"""

import torch
from torch.utils.data import Dataset
import pandas as pd
import numpy as np

class EEGMMIDBDataset(Dataset):
  def __init__(self, pickle_path, label_map=None, normalize=False, target_class=None):
    """
    Args:
    pickle_path (str): path to the .pkl file with EEG data
    label_map (dict): optional mapping from string label to integer class
    transform (callable): optional transofrm to apply to each sample

    return:

    """
    self.df = pd.read_pickle(pickle_path)
    self.normalize = normalize

    # default label
    if label_map is None:
      self.label_map = {
          'left_hand': 0,
          'right_hand': 1,
          'both_hands': 2,
          'both_feet': 3,
          'rest': 4
      }
    else:
      self.label_map = label_map


    # filter by class
    if target_class is not None:
      self.df = self.df[self.df['label'] == target_class].reset_index(drop=True)


  def __len__(self):
    return len(self.df)

  def __getitem__(self, idx):
      row = self.df.iloc[idx]
      signal = row['X']  # shape: (channels, timepoints)
      label = self.label_map[row['label']]


      if self.normalize:
        # Normalize
        signal = (signal - signal.mean()) / (signal.std() + 1e-8)

      # Add dummy spatial dimension â†’ (channels, 1, timepoints)
      signal = np.expand_dims(signal, axis=1).astype(np.float32)

      # Pad or truncate to 640
      if signal.shape[-1] < 640:
          #print(idx)
          pad_width = 640 - signal.shape[-1]
          pad = np.zeros((signal.shape[0], signal.shape[1], pad_width), dtype=np.float32)
          signal = np.concatenate([signal, pad], axis=2)
      elif signal.shape[-1] > 640:
          signal = signal[..., :640]

      return torch.tensor(signal), torch.tensor(label)

# import os
# # mount to google drive
# from google.colab import drive
# drive.mount('/content/drive')

# # defining path
# drive_path = "/content/drive/MyDrive/eeg_data"
# os.makedirs(drive_path, exist_ok=True)

# from torch.utils.data import DataLoader
# import pandas as pd

# train_dataset = EEGMMIDBDataset("/content/drive/MyDrive/eeg_data/eegmmidb_train_df.pkl")
# val_dataset   = EEGMMIDBDataset("/content/drive/MyDrive/eeg_data/eegmmidb_val_df.pkl")
# test_dataset  = EEGMMIDBDataset("/content/drive/MyDrive/eeg_data/eegmmidb_test_df.pkl")

# train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
# val_loader   = DataLoader(val_dataset, batch_size=32, shuffle=False)
# test_loader  = DataLoader(test_dataset, batch_size=32, shuffle=False)

# for batch in train_loader:
#   X, y = batch
#   print(f'EEG batch shape: {X.shape}')
#   print(f'label shape: {y.shape}')